#!groovy

@Library("Infrastructure")

String product = "probate"
String component = "business-service"

List<LinkedHashMap<String, Object>> secrets = [
    secret('probatePersistenceUrl', 'TEST_PERSISTENCE_URL'),
    secret('probateNotifyMobile', 'TEST_MOBILE'),
    secret('probate-notify-invite-apikey', 'PRO_SERVICES_NOTIFY_APIKEY'),
    secret('business-services-notify-invitedata-templateId', 'PRO_SERVICES_NOTIFY_INVITEDATA_TEMPLATEID'),
    secret('business-services-notify-pin-templateId', 'PRO_SERVICES_NOTIFY_PIN_TEMPLATEID'),
    secret('pdfservice-url', 'TEST_PDFSERVICE_URL'),
    secret('serviceAuthProviderBaseUrl', 'SERVICE_AUTH_PROVIDER_BASE_URL'),
    secret('s2sAuthTotpSecret', 'S2S_AUTH_TOTP_SECRET'),
    secret('probateUserAuthUrl', 'USER_AUTH_PROVIDER_OAUTH2_URL'),
    secret('probateIdamOauthRedirectUrl', 'IDAM_OAUTH2_REDIRECT_URI'),
    secret('probateIdamSecret', 'IDAM_SECRET'),
    secret('probateIdamUserName', 'IDAM_USERNAME'),
    secret('probateIdamPassword', 'IDAM_PASSWORD')
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

withPipeline("java", product, component) {
  setVaultName('probate')
  enableDockerBuild()
  installCharts()
  loadVaultSecrets(secrets)
  enableSlackNotifications('#probate-jenkins')
//  after('test') {
  //   try {
  //     sh './gradlew pitest'
  //   } finally {
  //     steps.archiveArtifacts "build/reports/pitest/**/*.*"
  //   }

//    publishHTML target: [
//            alwaysLinkToLastBuild: true,
//            reportDir            : "build/reports/tests/test",
//            reportFiles          : "index.html",
//            reportName           : "sol-ccd-service Test Report"
//    ]
//
//    publishHTML target: [
//            alwaysLinkToLastBuild: true,
//            reportDir            : "build/reports/jacoco",
//            reportFiles          : "index.html",
//            reportName           : "sol-ccd-service Code Coverage Report"
//    ]
//
//    publishHTML target: [
//            alwaysLinkToLastBuild: true,
//            reportDir            : "build/reports/findbugs",
//            reportFiles          : "main.html",
//            reportName           : "sol-ccd-service find Bugs Report"
//    ]
//  }

}
