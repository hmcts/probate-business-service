import java.util.stream.Collectors

buildscript {
    dependencies {
        classpath group: 'org.sonarsource.scanner.gradle', name: 'sonarqube-gradle-plugin', version: '2.5'
        classpath("net.serenity-bdd:serenity-gradle-plugin:1.5.2")
    }
}

plugins {
    id 'application'
    id 'pmd'
    id 'io.spring.dependency-management' version '1.0.6.RELEASE'
    id 'org.springframework.boot' version '2.0.4.RELEASE'
    id 'org.owasp.dependencycheck' version '3.2.1'
    id 'com.github.ben-manes.versions' version '0.15.0'
    id 'com.gorylenko.gradle-git-properties' version '1.5.2'
    id 'info.solidsoft.pitest' version '1.3.0'
}

apply plugin: 'org.sonarqube'
apply plugin: 'findbugs'
apply plugin: 'jacoco'
apply plugin: 'net.serenity-bdd.aggregator'


gitProperties {
    gitPropertiesDir = new File("${project.rootDir}/src/main/resources/uk/gov/hmcts/probate/services/business")
    keys = ['git.commit.id','git.commit.time']
    dateFormat = "yyyy-MM-dd'T'HH:mmZ"
    dateFormatTimeZone = "GMT"
}

group = 'uk.gov.hmcts.probate'
version = "3.0.0"
mainClassName = 'uk.gov.hmcts.probate.BusinessApplication'

sourceCompatibility = 1.8
targetCompatibility = 1.8

check.dependsOn dependencyCheckAnalyze

jacoco {
    toolVersion = '0.8.0'
}

jacocoTestReport {
    group = "Reporting"
    reports {
        xml.enabled false
        html.destination "${buildDir}/reports/jacoco"
    }
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}


findbugs{
    ignoreFailures=true
    reportLevel = "low"
}

sonarqube {
    properties {
        property "sonar.projectName", "Probate :: Business Service"
        property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/test.exec"
        property "sonar.host.url", "https://sonar.reform.hmcts.net/"
        property "sonar.pitest.mode", "reuseReport"
        property "sonar.pitest.reportsDirectory", "build/reports/pitest"
    }
}
pitest {
    targetClasses = ['uk.gov.hmcts.probate.*']
    threads = 4
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
    mutationThreshold = 50}

test.finalizedBy jacocoTestReport

dependencyCheck {
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFiles = ['config/owasp/suppressions.xml']
    analyzers {
        assemblyEnabled = false
    }
    scanConfigurations = ['compile']
}

sourceSets {
    testFunctional {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/functionalTest/java')
        }
    resources.srcDir file('src/functionalTest/resources')
  }

    testSmoke {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/smokeTest/java')
        }
        resources.srcDir file('src/smokeTest/resources')
  }
}

task smoke(type: Test) {
    description = "Runs Smoke Tests"
    testClassesDirs = sourceSets.testSmoke.output.classesDirs 
    classpath = sourceSets.testSmoke.runtimeClasspath
}

task functional(type: Test) {
    description = "Runs functional Tests"
    testClassesDirs = sourceSets.testFunctional.output.classesDirs
    classpath = sourceSets.testFunctional.runtimeClasspath
    finalizedBy aggregate
}

pmd {
    toolVersion = "6.3.0"
    ignoreFailures = true
    sourceSets = [sourceSets.main, sourceSets.test, sourceSets.testFunctional, sourceSets.testSmoke]
    reportsDir = file("$project.buildDir/reports/pmd")
    ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestReport {
    executionData(test)
    reports {
        xml.enabled = true
        csv.enabled = false
        xml.destination = file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }
}

repositories {
    mavenLocal()
    maven { url "https://dl.bintray.com/hmcts/hmcts-maven" }
    maven { url 'https://repo.spring.io/libs-milestone' }
    maven { url "http://repo.maven.apache.org/maven2" }
    jcenter()
}

processResources {
    from ('src/lib/AI-Agent.xml') {
        into 'lib'
    }
}

def versions = [
    logging: '3.0.3'
]

dependencies {
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web-services'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
    compile group: 'org.springframework.retry', name: 'spring-retry'
    compile group: 'org.projectlombok', name: 'lombok', version: '1.16.18'
    compile group: 'org.springframework.hateoas', name: 'spring-hateoas'
    compile group: 'org.hibernate.validator', name: 'hibernate-validator'
    compile group: 'org.projectlombok', name: 'lombok', version: '1.16.18'
    compile group: 'uk.gov.service.notify', name: 'notifications-java-client', version: '3.8.0-RELEASE'
    compile group: 'uk.gov.hmcts.reform', name: 'java-logging', version: versions.logging
    compile group: 'uk.gov.hmcts.reform', name: 'java-logging-spring', version: versions.logging
    compile group: 'uk.gov.hmcts.reform', name: 'java-logging-appinsights', version: versions.logging
    compile group: 'uk.gov.hmcts.reform', name: 'java-logging-httpcomponents', version: versions.logging
    compile group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: '2.0.1'

    compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.7.0'
    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.7.0'

    compile group: 'org.pitest', name: 'pitest', version: '1.3.2'
    compile 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.3.0'
    compile 'org.codehaus.sonar-plugins:sonar-pitest-plugin:0.5'

    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'

    testFunctionalCompile group: 'net.serenity-bdd', name: 'serenity-core', version: '1.5.2'
    testFunctionalCompile group: 'net.serenity-bdd', name: 'serenity-junit', version: '1.5.2'
    testFunctionalCompile group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: '1.5.2'
    testFunctionalCompile group: 'net.serenity-bdd', name: 'serenity-spring', version: '1.0.26'    
    testFunctionalCompile group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.0'
    testFunctionalCompile sourceSets.main.runtimeClasspath
    testFunctionalCompile sourceSets.test.runtimeClasspath

    testCompile group: 'io.rest-assured', name: 'rest-assured', version: '3.0.7'
    testSmokeCompile sourceSets.main.runtimeClasspath
    testSmokeCompile sourceSets.test.runtimeClasspath
}

compileJava {
    options.compilerArgs << '-parameters'
}

bootJar {
    archiveName = 'business-service.jar'
    manifest {

        attributes 'Implementation-Title': project.name,
                'Implementation-Version': project.version
    }
}

task printVersion {
    doLast {
        print project.version
    }
}

run {
    if (debug == 'true') {
        jvmArgs = ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005']
    }
}
